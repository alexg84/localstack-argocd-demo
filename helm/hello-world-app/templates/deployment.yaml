apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "hello-world-app.fullname" . }}
  labels:
    {{- include "hello-world-app.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "hello-world-app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "hello-world-app.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/sh"]
          args:
            - -c
            - |
              pip install Flask==2.3.3
              cat > /tmp/main.py << 'EOF'
              from flask import Flask
              import os
              
              app = Flask(__name__)
              
              @app.route('/')
              def hello_world():
                  return '''
                  <html>
                      <head>
                          <title>Hello World App</title>
                          <style>
                              body { font-family: Arial, sans-serif; text-align: center; margin-top: 50px; }
                              h1 { color: #333; }
                              p { color: #666; }
                          </style>
                      </head>
                      <body>
                          <h1>Hello World!</h1>
                          <p>This is a Flask application running in Kubernetes</p>
                          <p>Deployed with ArgoCD via GitOps</p>
                      </body>
                  </html>
                  '''
              
              @app.route('/health')
              def health_check():
                  return {'status': 'healthy', 'message': 'Application is running'}
              
              if __name__ == '__main__':
                  port = int(os.environ.get('PORT', 5000))
                  app.run(host='0.0.0.0', port=port, debug=True)
              EOF
              python /tmp/main.py
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}